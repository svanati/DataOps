# -*- coding: utf-8 -*-
"""Pipeline logging process

This module will log all events generated by the pipeline process

Author:
    Elvin Ellis Smith Jr

Example:
    $ python PipelineLogger.py

To-do:
    * NA

Changelog:
    * 2021-05-01: Initial release

License:
    MIT <https://mit-license.org/>
"""
import json
import logging

from pyspark.sql import SparkSession


class PipelineLogger:
    """This class will parse various configuration file(s)."""

    def __init__(self, ):
        """Class initialization"""
        pass

    @staticmethod
    def logger_spark(pipeline_env_file, pipeline_log_level):
        """Database pipeline logging process.

        Args:
        :type pipeline_env_file: object
        :type pipeline_log_level: object
        """
        try:
            # Parse the configuration file name
            with open(str(pipeline_env_file), 'r') as json_env_file:
                json_env_config = json.load(json_env_file)

            # Set Spark master instance
            spark_master = str(json_env_config['spark'][0]['master'])

            # Set Spark session.
            spark = SparkSession \
                .builder \
                .appName("Pipeline - Logger") \
                .master(spark_master) \
                .config("spark.driver.extraClassPath", "./jars/*") \
                .config("spark.logConf", "true") \
                .getOrCreate()

            spark.sparkContext.setLogLevel(pipeline_log_level)
            log4j = spark._jvm.org.apache.log4j
            logger = log4j.LogManager.getLogger("Pipeline Logger")

            return logger

        except Exception as e:
            print("Exception: {0}".format(e))

    @staticmethod
    def logger_general(pipeline_log_file, pipeline_log_level, error_msg):
        """General logging process.

        Args:
        :rtype: object
        :type pipeline_log_file: object
        :type pipeline_log_level: object
        :type error_msg: object
        """
        try:
            # Create logger instance, create console handler, and set level
            # to debug
            logger = logging.getLogger('Logger')
            sh = logging.StreamHandler()
            fh = logging.FileHandler(str(pipeline_log_file))

            if pipeline_log_level == "CRITICAL":
                logger.setLevel(logging.CRITICAL)
                sh.setLevel(logging.CRITICAL)
                fh.setLevel(logging.CRITICAL)
            if pipeline_log_level == "DEBUG":
                logger.setLevel(logging.DEBUG)
                sh.setLevel(logging.DEBUG)
                fh.setLevel(logging.DEBUG)
            if pipeline_log_level == "ERROR":
                logger.setLevel(logging.ERROR)
                sh.setLevel(logging.ERROR)
                fh.setLevel(logging.ERROR)
            if pipeline_log_level == "INFO":
                logger.setLevel(logging.INFO)
                sh.setLevel(logging.INFO)
                fh.setLevel(logging.INFO)
            if pipeline_log_level == "WARNING":
                logger.setLevel(logging.WARNING)
                sh.setLevel(logging.WARNING)
                fh.setLevel(logging.WARNING)

            # Create log file formatter, add formatter to sh, and add sh to
            # logger
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s')

            sh.setFormatter(formatter)
            fh.setFormatter(formatter)
            logger.addHandler(sh)
            logger.addHandler(fh)

            if pipeline_log_level == "CRITICAL":
                logger.critical(error_msg)
            if pipeline_log_level == "DEBUG":
                logger.debug(error_msg)
            if pipeline_log_level == "ERROR":
                logger.error(error_msg)
            if pipeline_log_level == "INFO":
                logger.info(error_msg)
            if pipeline_log_level == "WARNING":
                logger.warning(error_msg)

        except Exception as e:
            print("Exception: {0}".format(e))
